- name: Disable Nodejs 
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs 20
  ansible.builtin.command: dnf module enable nodejs:20 -y 

- name: Install nodejs 20
  dnf:
    name: "{{item}}"
    state: installed
  loop:
  - mysql
  - nodejs      

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: run app pre-requisites
  tags:
  - deployment # means Download the code
  ansible.builtin.import_role:
    name: common
    tasks_from: common_code

# - name: App Directory creation
#   ansible.builtin.file:
#     path: /app
#     state: directory

# - name: download backend code
#   ansible.builtin.get_url:
#     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest: /tmp/backend.zip

# - name: unzip backend code in app Directory
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip
#     dest: /app
#     remote_src: yes    

- name: install npm dependencies
  tags:
  - deployment
  ansible.builtin.command: npm install
  args:
    chdir: /app

- name: copy backend service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service
    #remote_src: yes

- name: Install Python Dependencies
  tags:
  - deployment
  ansible.builtin.pip:
    name: 
    - PyMySQL   
    - cryptography
    executable: pip3.9  

- name: import data into mysql
  community.mysql.mysql_db:
    login_user: "{{ user }}"
    login_password: "{{ password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql
    state: import
    name: all    

- name: daemon reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: start and enable servers
  ansible.builtin.service:
    name: backend
    state: started
    enabled: yes
